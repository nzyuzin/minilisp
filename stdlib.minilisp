(define (abs x)
  (if (< x 0)
    (- 0 x)
    x))

(define (remainder num divisor)
  (if (< num divisor)
    num
    (remainder (- num divisor) divisor)))

(define (square x) (* x x))

(define (cadr c)
  (car (cdr c)))

(define (cddr c)
  (cdr (cdr c)))

(define (length lst)
  (if (null? lst)
    0
    (+ 1 (length (cdr lst)))))

(define (append el lst)
  (cons el lst))

(define (map f lst)
  (if (null? lst)
    ()
    (cons (f (car lst)) (map f (cdr lst)))))

(define (filter predicate lst)
  (if (null? lst)
    ()
    (if (predicate (car lst))
      (cons (car lst) (filter predicate (cdr lst)))
      (filter predicate (cdr lst)))))

(define (fold-right combinator initial-value lst)
  (if (null? lst)
    initial-value
    (combinator (car lst) (fold-right combinator initial-value (cdr lst)))))
